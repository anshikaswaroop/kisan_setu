import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { VoiceAgent } from "@/components/VoiceAgent";
import { CropCard } from "@/components/CropCard";
import { Separator } from "@/components/ui/separator";
import { ArrowLeft, Search, MapPin, Crown, Zap, User } from "lucide-react";
import { Link } from "react-router-dom";

const BuyerDashboard = () => {
  const [requirement, setRequirement] = useState({
    crop: "",
    quantity: "",
    maxPrice: ""
  });

  const [isSubscribed, setIsSubscribed] = useState(false);

  const nearbyFarmers = [
    {
      farmerName: "рд░рд╛рдо рдХреБрдорд╛рд░",
      cropName: "рдЯрдорд╛рдЯрд░",
      quantity: "50 рдХреНрд╡рд┐рдВрдЯрд▓",
      price: "тВ╣70/рдХрд┐рд▓реЛ",
      phone: "9876543210",
      location: "рдЧреБрдбрд╝рдЧрд╛рдВрд╡, рд╣рд░рд┐рдпрд╛рдгрд╛",
      distance: "2 рдХрд┐рдореА",
      isHighlighted: true
    },
    {
      farmerName: "рд╢реНрдпрд╛рдо рдкрд╛рдЯрд┐рд▓",
      cropName: "рдЯрдорд╛рдЯрд░", 
      quantity: "30 рдХреНрд╡рд┐рдВрдЯрд▓",
      price: "тВ╣75/рдХрд┐рд▓реЛ",
      phone: "9876543211",
      location: "рдлрд░реАрджрд╛рдмрд╛рдж, рд╣рд░рд┐рдпрд╛рдгрд╛",
      distance: "5 рдХрд┐рдореА"
    },
    {
      farmerName: "рдЧреЛрдкрд╛рд▓ рд╕рд┐рдВрд╣",
      cropName: "рдЯрдорд╛рдЯрд░",
      quantity: "40 рдХреНрд╡рд┐рдВрдЯрд▓", 
      price: "тВ╣65/рдХрд┐рд▓реЛ",
      phone: "9876543212",
      location: "рдиреЛрдПрдбрд╛, рдЙрддреНрддрд░ рдкреНрд░рджреЗрд╢",
      distance: "8 рдХрд┐рдореА"
    }
  ];

  const handleSearch = () => {
    // Simulate search functionality
    console.log("Searching for:", requirement);
  };

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="bg-gradient-primary border-b border-primary/20 p-4">
        <div className="container mx-auto flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <Link to="/">
              <Button variant="outline" size="sm">
                <ArrowLeft className="h-4 w-4 mr-2" />
                рд╡рд╛рдкрд╕
              </Button>
            </Link>
            <h1 className="text-2xl font-bold text-accent">рдЦрд░реАрджрд╛рд░ рдбреИрд╢рдмреЛрд░реНрдб</h1>
          </div>
          <div className="flex items-center space-x-4">
            {isSubscribed && (
              <Badge className="bg-accent text-accent-foreground">
                <Crown className="h-3 w-3 mr-1" />
                рдкреНрд░реАрдорд┐рдпрдо рд╕рджрд╕реНрдп
              </Badge>
            )}
            <div className="flex items-center space-x-2 text-primary-foreground">
              <User className="h-5 w-5" />
             <span>{localStorage.getItem("buyerName") || "рд░рд╛рдЬреВ"}</span>

            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto p-6 space-y-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Search & Requirements */}
          <div className="lg:col-span-1 space-y-6">
            <Card className="p-6 bg-gradient-earth border-primary/20 shadow-earth">
              <h2 className="text-xl font-bold text-accent mb-4">рдЖрд╡рд╢реНрдпрдХрддрд╛ рджрд░реНрдЬ рдХрд░реЗрдВ</h2>
              
              <div className="space-y-4">
                <div>
                  <Label>рдлрд╕рд▓ рдЪреБрдиреЗрдВ</Label>
                  <Select value={requirement.crop} onValueChange={(value) => setRequirement({...requirement, crop: value})}>
                    <SelectTrigger>
                      <SelectValue placeholder="рдлрд╕рд▓ рдЪреБрдиреЗрдВ" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="рдЯрдорд╛рдЯрд░">рдЯрдорд╛рдЯрд░</SelectItem>
                      <SelectItem value="рдкреНрдпрд╛рдЬрд╝">рдкреНрдпрд╛рдЬрд╝</SelectItem>
                      <SelectItem value="рдЧреЗрд╣реВрдВ">рдЧреЗрд╣реВрдВ</SelectItem>
                      <SelectItem value="рдЪрд╛рд╡рд▓">рдЪрд╛рд╡рд▓</SelectItem>
                      <SelectItem value="рдЖрд▓реВ">рдЖрд▓реВ</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label>рдХрд┐рддрдиреА рдорд╛рддреНрд░рд╛ рдЪрд╛рд╣рд┐рдП</Label>
                  <Input 
                    placeholder="рдЬреИрд╕реЗ: 50 рдХрд┐рд▓реЛ рдпрд╛ 2 рдХреНрд╡рд┐рдВрдЯрд▓"
                    value={requirement.quantity}
                    onChange={(e) => setRequirement({...requirement, quantity: e.target.value})}
                  />
                </div>

                <div>
                  <Label>рдЕрдзрд┐рдХрддрдо рдХреАрдордд</Label>
                  <Input 
                    placeholder="рдЬреИрд╕реЗ: тВ╣70/рдХрд┐рд▓реЛ"
                    value={requirement.maxPrice}
                    onChange={(e) => setRequirement({...requirement, maxPrice: e.target.value})}
                  />
                </div>

                <Button onClick={handleSearch} className="w-full">
                  <Search className="h-4 w-4 mr-2" />
                  рдХрд┐рд╕рд╛рди рдЦреЛрдЬреЗрдВ
                </Button>
              </div>
            </Card>

            {/* Voice Agent */}
            <VoiceAgent type="buyer" />

            {/* Subscription Card */}
            {!isSubscribed && (
              <Card className="p-6 bg-gradient-harvest/20 border-accent/30 shadow-glow">
                <div className="text-center space-y-4">
                  <Crown className="h-12 w-12 text-accent mx-auto" />
                  <h3 className="text-lg font-bold text-accent">рдкреНрд░реАрдорд┐рдпрдо рд╕рдмреНрд╕рдХреНрд░рд┐рдкреНрд╢рди</h3>
                  <p className="text-sm text-muted-foreground">
                    рдЕрд╕реАрдорд┐рдд рдХрд┐рд╕рд╛рдиреЛрдВ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ
                  </p>
                  <div className="text-2xl font-bold text-accent">тВ╣200/рдорд╣реАрдирд╛</div>
                  <Button 
                    className="w-full bg-accent hover:bg-accent/90"
                    onClick={() => setIsSubscribed(true)}
                  >
                    рдЕрднреА рд╕рдмреНрд╕реНрдХреНрд░рд╛рдЗрдм рдХрд░реЗрдВ
                  </Button>
                </div>
              </Card>
            )}

            {/* Highlight Option */}
            <Card className="p-4 bg-warning/10 border-warning/30">
              <div className="flex items-center space-x-3">
                <Zap className="h-8 w-8 text-warning" />
                <div className="flex-1">
                  <h4 className="font-bold text-warning">рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд░реЗрдВ</h4>
                  <p className="text-xs text-muted-foreground">тВ╣100 рдореЗрдВ рдЕрдкрдиреА рдЬрд░реВрд░рдд рдКрдкрд░ рджрд┐рдЦрд╛рдПрдВ</p>
                </div>
                <Button size="sm" variant="outline" className="border-warning text-warning">
                  рд╣рд╛рдЗрд▓рд╛рдЗрдЯ рдХрд░реЗрдВ
                </Button>
              </div>
            </Card>
          </div>

          {/* Nearby Farmers */}
          <div className="lg:col-span-2 space-y-6">
            <div className="flex items-center justify-between">
              <h2 className="text-2xl font-bold text-accent">рдирдЬрджреАрдХреА рдХрд┐рд╕рд╛рди (10 рдХрд┐рдореА рдХреЗ рдЕрдВрджрд░)</h2>
              <div className="flex items-center space-x-2 text-muted-foreground">
                <MapPin className="h-4 w-4" />
                <span className="text-sm">рдЧреБрдбрд╝рдЧрд╛рдВрд╡, рд╣рд░рд┐рдпрд╛рдгрд╛</span>
              </div>
            </div>

            <div className="space-y-4">
              {nearbyFarmers.map((farmer, index) => (
                <CropCard key={index} {...farmer} />
              ))}
            </div>

            {nearbyFarmers.length === 0 && (
              <Card className="p-8 text-center">
                <p className="text-muted-foreground">
                  рдЕрднреА рддрдХ рдХреЛрдИ рдХрд┐рд╕рд╛рди рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдЕрдкрдиреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рджрд░реНрдЬ рдХрд░реЗрдВред
                </p>
              </Card>
            )}
          </div>
        </div>

        <Separator className="bg-border" />

        {/* Ads Section */}
        <Card className="p-6 bg-gradient-harvest/20 border-accent/30 shadow-glow">
          <h3 className="text-xl font-bold text-accent mb-4">ЁЯЫТ рд╡реНрдпрд╛рдкрд╛рд░рд┐рдХ рд╕реЗрд╡рд╛рдПрдВ</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="p-4 bg-background/50 rounded-lg text-center">
              <h4 className="font-bold">ЁЯЪЫ рдкрд░рд┐рд╡рд╣рди рд╕реЗрд╡рд╛</h4>
              <p className="text-sm text-muted-foreground">рдШрд░ рддрдХ рдбрд┐рд▓реАрд╡рд░реА</p>
            </div>
            <div className="p-4 bg-background/50 rounded-lg text-center">
              <h4 className="font-bold">ЁЯПк рдереЛрдХ рдЦрд░реАрджрд╛рд░реА</h4>
              <p className="text-sm text-muted-foreground">рдмреЗрд╣рддрд░ рджрд░реЛрдВ рдкрд░</p>
            </div>
            <div className="p-4 bg-background/50 rounded-lg text-center">
              <h4 className="font-bold">ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдРрдк</h4>
              <p className="text-sm text-muted-foreground">рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ</p>
            </div>
          </div>
        </Card>
      </div>
    </div>
  );
};

export default BuyerDashboard;